# Run all kickstart tests for all active branches in Permian
name: Daily run in Permian
on:
  workflow_dispatch:

jobs:
  scenario:
    name: Scenario in Permian
    runs-on: [self-hosted, kstest-permian]
    strategy:
      matrix:
        scenario: [daily-iso, rhel8, rhel9]
      fail-fast: false

    # these settings depend on the infrastructure; on upshift ocp-master-xxl they take about 4 hours
    timeout-minutes: 480
    env:
      TEST_JOBS: 16
      GITHUB_TOKEN: /home/github/github-token
      # Can't figure out how to read the timeout-minutes value defined above
      # so define it again as environment variable usable in run script
      TIMEOUT_MINUTES: 480

    steps:
      # self-hosted runners don't do this automatically; also useful to keep stuff around for debugging
      # need to run sudo as the launch script and the container create root/other user owned files
      - name: Clean up previous run
        run: |
          sudo podman ps -q --all --filter='ancestor=kstest-runner' | xargs -tr sudo podman rm -f
          sudo podman volume rm --all || true
          sudo rm -rf *

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          path: kickstart-tests

      - name: Generate test cases
        working-directory: ./kickstart-tests
        run: scripts/generate-testcases.py -t ./testlib/test_cases/kstest-template.tc.yaml.j2 . -o ./testlib/test_cases

      - name: Clone Permian repositories
        run: |
          git clone https://github.com/rvykydal/permian.git --branch kstests-daily-scenario
          git clone https://github.com/rhinstaller/tclib.git

      # use the latest official packages for the nightly runs
      - name: Clean up squid cache
        run: sudo containers/squid.sh clean
        working-directory: ./kickstart-tests

      - name: Ensure http proxy is running
        run: sudo containers/squid.sh start
        working-directory: ./kickstart-tests

      # Fetch boot.iso and configiure its local location
      - name: Set boot.iso from scenario
        id: boot_iso_from_scenario
        run: |
          set -eux
          BOOT_ISO_PATH="${{ github.workspace }}/${{ matrix.scenario }}.boot.iso"
          BOOT_ISO_URL="file://$BOOT_ISO_PATH"
          if [ "${{ matrix.scenario }}" == "daily-iso" ] || [ "${{ matrix.scenario }}" == "minimal" ]; then
            ${{ github.workspace }}/kickstart-tests/containers/runner/fetch_daily_iso.sh $GITHUB_TOKEN $BOOT_ISO_PATH
          elif [ "${{ matrix.scenario }}" == "rhel8" ]; then
            curl -L http://download.eng.bos.redhat.com/rhel-8/development/RHEL-8/latest-RHEL-8.6/compose/BaseOS/x86_64/os/images/boot.iso --output $BOOT_ISO_PATH
          elif [ "${{ matrix.scenario }}" == "rhel9" ]; then
            curl -L http://download.eng.bos.redhat.com/rhel-9/development/RHEL-9/latest-RHEL-9.0/compose/BaseOS/x86_64/os/images/boot.iso --output $BOOT_ISO_PATH
          else
            echo "Boot.iso for ${{ matrix.scenario }} not configured"
            BOOT_ISO_URL=
          fi
          echo "::set-output name=boot_iso::$BOOT_ISO_URL"

      - name: Set launcher timeout from job timeout
        id: set_timeout
        run: |
          set -eux
          echo "::set-output name=timeout::$(($TIMEOUT_MINUTES-20))m"

      - name: Run scenario ${{ matrix.scenario }} in container
        working-directory: ./permian
        run: sudo --preserve-env=TEST_JOBS PYTHONPATH=${PYTHONPATH:-}:${{ github.workspace }}/tclib ./pipeline --debug-log permian.log -o library.directPath="${{ github.workspace }}/kickstart-tests/testlib" -o kickstart_test.retry_on_failure=True -o workflows.dry_run=False -o kickstart_test.kstest_local_repo="${{ github.workspace }}/kickstart-tests" -o kickstart_test.timeout="${{ steps.set_timeout.outputs.timeout }}" run_event '{"type":"github.scheduled.daily.kstest.${{ matrix.scenario }}","bootIso":{"x86_64":"${{ steps.boot_iso_from_scenario.outputs.boot_iso }}"}}'

      - name: Collect anaconda logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'logs-${{ matrix.scenario }}'
          # skip the /anaconda subdirectories, too large
          path: |
            kickstart-tests/data/logs/kstest.log
            kickstart-tests/data/logs/kstest-*/*.log
            kickstart-tests/data/logs/kstest-*/anaconda/lorax-packages.log

      - name: Collect Permian logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'logs-permian-${{ matrix.scenario }}'
          path: |
            permian/permian.log

      - name: Collect Permian xunit reporter results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'results-xunit-${{ matrix.scenario }}'
          path: |
            permian/xunit-*.xml

      # Keep compatibility of the overall results, Permian now hides the exit code of launcher
      - name: Pass the launch script exit code
        working-directory: ./permian
        run: $( exit $( grep "Runner return code:" permian.log | rev | cut -d ':' -f 1 | rev ) )

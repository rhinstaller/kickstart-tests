# Run all disabled kickstart tests for tested os variants
name: Run disabled tests
on:
  schedule:
    # run after daily-boot-iso.yml
    - cron: 0 23 * * *
  workflow_dispatch:

permissions:
  contents: read

jobs:
  scenario:
    name: Disabled tests
    runs-on: [self-hosted, kstest]
    strategy:
      matrix:
        scenario: [daily-iso, rawhide, rhel9, rhel10, centos10]
      fail-fast: false

    timeout-minutes: 140
    env:
      TEST_JOBS: 16
      GITHUB_TOKEN: /home/github/github-token
      # The timeout should be ~20 minutes less then the job's timeout-minutes
      # so that we get partial results and logs in case of the timeout.
      LAUNCHER_TIMEOUT_MINUTES: 120

    steps:
      # self-hosted runners don't do this automatically; also useful to keep stuff around for debugging
      # need to run sudo as the launch script and the container create root/other user owned files
      - name: Clean up previous run
        run: |
          sudo podman ps -q --all --filter='ancestor=kstest-runner' | xargs -tr sudo podman rm -f
          sudo podman volume rm --all || true
          sudo rm -rf *

      - name: Clone repository
        uses: actions/checkout@v4
        with:
          path: kickstart-tests

      - name: Generate test cases
        working-directory: ./kickstart-tests
        run: scripts/generate-testcases.py -t ./testlib/test_cases/kstest-template.tc.yaml.j2 . -o ./testlib/test_cases

      - name: Clone Permian repository
        uses: actions/checkout@v4
        with:
          repository: rhinstaller/permian
          path: permian
          ref: main

      - name: Clone tplib repository
        uses: actions/checkout@v4
        with:
          repository: rhinstaller/tplib
          path: tplib

      # use the latest official packages for the nightly runs
      - name: Clean up squid cache
        run: sudo containers/squid.sh clean
        working-directory: ./kickstart-tests

      - name: Ensure http proxy is running
        run: sudo containers/squid.sh start
        working-directory: ./kickstart-tests

      - name: Generate test selection for os variant ${{ matrix.scenario }}
        id: generate_query
        working-directory: ./kickstart-tests
        run: |
          LAUNCH_ARGS=$(scripts/generate-launch-args.py --disabled \
             --os-variant ${{ matrix.scenario }} ) || RC=$?
          if [ -z ${RC} ] || [ ${RC} == 0 ]; then
            echo "Generated launch arguments: $LAUNCH_ARGS"
          else
            echo "Generating of the arguments failed. See the workflow file for usage."
            exit 1
          fi
          PERMIAN_QUERY=$(scripts/generate-permian-query.py $LAUNCH_ARGS)
          echo "Generated permian query: $PERMIAN_QUERY"
          echo "query=$PERMIAN_QUERY" >> $GITHUB_OUTPUT
          PLATFORM=$(scripts/generate-permian-query.py --print-platform $LAUNCH_ARGS)
          echo "Generated platform: $PLATFORM"
          echo "platform=$PLATFORM" >> $GITHUB_OUTPUT

      # Fetch boot.iso and configure its local location
      - name: Fetch boot.iso if available for os variant ${{ matrix.scenario }}
        id: boot_iso_for_os_variant
        run: |
          set -eux
          BOOT_ISO_PATH="${{ github.workspace }}/${{ matrix.scenario }}.boot.iso"
          BOOT_ISO_URL="file://$BOOT_ISO_PATH"
          if [ "${{ matrix.scenario }}" == "daily-iso" ]; then
            ${{ github.workspace }}/kickstart-tests/containers/runner/fetch_daily_iso.sh $GITHUB_TOKEN $BOOT_ISO_PATH
            echo "boot_iso=\"bootIso\":{\"x86_64\":\"${BOOT_ISO_URL}\"}," >> $GITHUB_OUTPUT
          elif [ "${{ matrix.scenario }}" == "rawhide" ]; then
            curl -L https://download.fedoraproject.org/pub/fedora/linux/development/rawhide/Everything/x86_64/os/images/boot.iso --output $BOOT_ISO_PATH
            echo "boot_iso=\"bootIso\":{\"x86_64\":\"${BOOT_ISO_URL}\"}," >> $GITHUB_OUTPUT
          else
            echo "Boot.iso for ${{ matrix.scenario }} can't be fetched."
            echo "boot_iso=" >> $GITHUB_OUTPUT
          fi

      # Configure location of installation repositories for the os variant
      # Also default boot.iso is defined by the value of urls.installation_tree
      # of kstestParams event structure.
      - name: Set installation tree for the os variant
        id: set_installation_urls
        working-directory: ./kickstart-tests
        run: |
          set -eux
          if [ "${{ matrix.scenario }}" == "rhel8" ] || \
             [ "${{ matrix.scenario }}" == "rhel9" ] || \
             [ "${{ matrix.scenario }}" == "rhel10" ] || \
             [ "${{ matrix.scenario }}" == "centos10" ]; then
            source ./scripts/defaults-${{ matrix.scenario }}.sh
            echo "installation_tree=${KSTEST_URL}" >> $GITHUB_OUTPUT
            echo "modular_url=${KSTEST_MODULAR_URL}" >> $GITHUB_OUTPUT
          else
            echo "Installation tree location for ${{ matrix.scenario }} not configured"
            if [ -z "${{ steps.boot_iso_for_os_variant.outputs.boot_iso }}" ]; then
              echo "No boot.iso source is defined"
              exit 2
            fi
            echo "installation_tree=" >> $GITHUB_OUTPUT
            echo "modular_url=" >> $GITHUB_OUTPUT
          fi

      - name: Create Permian settings file
        working-directory: ./permian
        run: |
          cat <<EOF > settings.ini
          [kickstart_test]
          kstest_local_repo=${{ github.workspace }}/kickstart-tests
          [library]
          directPath=${{ github.workspace }}/kickstart-tests/testlib
          EOF

      - name: Run kickstart tests in container
        working-directory: ./permian
        run: |
          sudo --preserve-env=TEST_JOBS \
          PYTHONPATH=${PYTHONPATH:-}:${{ github.workspace }}/tplib \
          ./run_subset --debug-log permian.log \
            --settings settings.ini \
            --override workflows.dry_run=False \
            --testcase-query '${{ steps.generate_query.outputs.query }}' \
            run_event '{
              "type":"everything",
              "everything_testplan":{
                "configurations":[{"architecture":"x86_64"}],
                "point_person":"rvykydal@redhat.com"
              },
              ${{ steps.boot_iso_for_os_variant.outputs.boot_iso }}
              "kstestParams":{
                "platform":"${{ steps.generate_query.outputs.platform }}",
                "urls":{
                  "x86_64":{
                    "installation_tree":"${{ steps.set_installation_urls.outputs.installation_tree }}",
                    "modular_url":"${{ steps.set_installation_urls.outputs.modular_url }}"
                  }
                }
              }
            }'

          # Permian hides the exit code of launcher, so error out this step manually based on logs
          rc=$( awk '/Runner return code: /{ print $4 }' permian.log)
          if [ -n "$rc" ]; then
            exit $rc
          else
            grep -q "All execution and reporting is done" permian.log || exit 111
          fi

      - name: Collect anaconda logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'logs-${{ matrix.scenario }}'
          # skip the /anaconda subdirectories, too large
          path: |
            kickstart-tests/data/logs/kstest*.log
            kickstart-tests/data/logs/kstest.log.json
            kickstart-tests/data/logs/kstest-*/*.log
            kickstart-tests/data/logs/kstest-*/anaconda/lorax-packages.log
            kickstart-tests/data/logs/kstest-*/original-ks.cfg

      - name: Collect json summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'summary-${{ matrix.scenario }}'
          path: |
            kickstart-tests/data/logs/kstest.log.json

      - name: Collect Permian logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'logs-permian-${{ matrix.scenario }}'
          path: |
            permian/permian.log

      - name: Collect Permian xunit reporter results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'results-xunit-${{ matrix.scenario }}'
          path: |
            permian/xunit-*.xml

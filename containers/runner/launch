#!/bin/sh
# Run a set of tests (positional command line arguments) in the runner container in podman or docker.
# Tests are taken from the current kickstart-tests checkout
# If data/images/boot.iso exists, that is tested, otherwise it downloads the current Fedora Rawhide version.
# This runs `nproc` parallel tests by default; this can be changed by setting $TEST_JOBS.

set -eu

BASEDIR=$(dirname $(dirname $(dirname $(realpath $0))))
TEST_JOBS=${TEST_JOBS:-$(nproc)}
CRUN=${CRUN:-$(which podman docker 2>/dev/null | head -n1)}
CONTAINER=quay.io/rhinstaller/kstest-runner
# Podman in rootless mode does not have access to /dev/kvm socket https://bugzilla.redhat.com/show_bug.cgi?id=1901462
# disable selinux container separation when podman is executed as user
PODMAN_SELINUX_FIX=

if ! test -w /dev/kvm; then
    echo "FATAL: /dev/kvm not accessible" >&2
    exit 1
fi

usage() {
    cat <<EOF
Usage:
  Run individual tests:
    $0 [options] test1 test2 ...

  Run all tests:
    $0 [options] all

Options:
 -j, --jobs N                         Run N jobs in parallel (default: $(nproc))
 -p, --platform NAME                  See fragments/platform/ (default: fedora_rawhide)
 -t, --testtype TYPE                  Only run TYPE tests
 -s, --skip-testtypes TYPE[,TYPE..]   Don't run tests with given types
 -u, --updates PATH|URL               Set updates.img path or URL
 -a, --additional-repo PATH|URL       Set additional repo path or URL
 -r, --retry                          Retry failed tests once, to guard against random
                                      infrastructure failures
 --daily-iso TOKEN_FILE               Download and use daily boot.iso instead of rawhide's
                                      (This requires a GitHub token that can read
                                       rhinstaller/kickstart-tests workflow artifacts.)
 --defaults DEFAULTS_SH_FILE          Path to file with overrides to scripts/defaults.sh
 --run-args ARGUMENTS                 Extra $CRUN options/arguments (space separated)
 -h, --help                           Show this help
EOF
}

# parse options
eval set -- "$(getopt -o j:p:t:s:u:a:rh --long jobs:,platform:,testtype:,skip-testtypes:,updates:additional-repo:,retry,daily-iso:,defaults:,run-args:,help -- "$@")"

while true; do
    case "${1:-}" in
        -j|--jobs) shift; TEST_JOBS=$1 ;;
        -p|--platform) shift; PLATFORM=$1 ;;
        -t|--testtype) shift; TESTTYPE="$1" ;;
        -s|--skip-testtypes) shift; SKIP_TESTTYPES="$1" ;;
        -u|--updates) shift; UPDATES_IMAGE="$1" ;;
        -a|--additional-repo) shift; ADDITIONAL_REPO="$1" ;;
        -r|--retry) TEST_RETRY=1 ;;
        --daily-iso) shift; DAILY_ISO_TOKEN="$1" ;;
        --defaults) shift; DEFAULTS_SH="$1" ;;
        --run-args) shift; CONTAINER_RUN_ARGS="$1" ;;
        -h|--help) usage; exit 0 ;;
        --) shift; break ;;
    esac
    shift
done

# avoid accidentally running all tests
if [ -z "${1:-}" ] && [ -z "${TESTTYPE:-}" ]; then
    usage
    exit 1
elif [ "${1:-}" = all ] && [ -z "${2:-}" ]; then
    KSTESTS_TEST=""
else
    KSTESTS_TEST="$*"
fi

# prepare data directory
mkdir -p data/images
mkdir -p -m 777 data/logs
if ! [ -e data/images/boot.iso ]; then
    if [ -n "${DAILY_ISO_TOKEN:-}" ]; then
        echo "INFO: data/images/boot.iso does not exist, downloading daily iso..."
        CURL="curl -u token:$(cat $DAILY_ISO_TOKEN) --show-error --fail"
        RESPONSE=$($CURL --silent https://api.github.com/repos/rhinstaller/kickstart-tests/actions/artifacts)
        ZIP=$(echo "$RESPONSE" | jq --raw-output '.artifacts | map(select(.name == "images"))[0].archive_download_url')
        echo "INFO: Downloading $ZIP ..."
        $CURL -L -o data/images.zip "$ZIP"
        # there is on unzip on RHEL 7, so fall back to 7za (p7zip package)
        (cd data/images && if type unzip >/dev/null 2>&1; then unzip ../images.zip; else 7za x ../images.zip; fi)
    else
        echo "INFO: data/images/boot.iso does not exist, downloading current Fedora Rawhide Server image..."
        curl -L https://download.fedoraproject.org/pub/fedora/linux/development/rawhide/Server/x86_64/os/images/boot.iso --output data/images/boot.iso
    fi
fi

# support both path and URL for --updates
if [ -e "${UPDATES_IMAGE:-}" ]; then
    # local file; bind mount into container
    UPDATES_IMG_ARGS="-v $UPDATES_IMAGE:/updates.img:ro,Z --env UPDATES_IMAGE=/updates.img"
elif [ -n "${UPDATES_IMAGE:-}" ]; then
    # URL, pass through
    UPDATES_IMG_ARGS="--env UPDATES_IMAGE=$UPDATES_IMAGE"
fi

# support both path and URL for additional repo
if [ -e "${ADDITIONAL_REPO:-}" ]; then
    # local folder; bind mount into container
    ADDITIONAL_REPO_ARGS="-v $ADDITIONAL_REPO:/kstest_additional_repo:ro,Z --env ADDITIONAL_REPO=/kstest_additional_repo"
elif [ -n "${ADDITIONAL_REPO:-}" ]; then
    # URL, pass through
    ADDITIONAL_REPO_ARGS="--env ADDITIONAL_REPO=$ADDITIONAL_REPO"
fi

if [ -n "${DEFAULTS_SH:-}" ]; then
    DEFAULTS_SH_ARGS="-v $DEFAULTS_SH:/home/kstest/.kstests.defaults.sh:ro,z"
fi

# if there is enough RAM (2 GB per test with 2x safety margin), and we don't keep VM images, put the VMs on tmpfs for faster tests
if awk "/MemAvailable:/ { exit (\$2 > 4000000*${TEST_JOBS}) ? 0 : 1  }" /proc/meminfo; then
    VAR_TMP="--tmpfs /var/tmp/"
# for many parallel jobs, use a anonymous volume, so that the container does not go ENOSPC
elif [ ${TEST_JOBS} -gt 4 ]; then
    VAR_TMP="-v /var/tmp"
fi

if [ "${CRUN%podman*}" != "$CRUN" ] && [ $(id -u) -ne 0 ]; then
    echo "Disabling SELinux container separation to enable /dev/kvm socket access."
    PODMAN_SELINUX_FIX="--security-opt label=disable"
fi

# Run container against the local repository, to test changes easily
# Expose the container's libvirt to the host; check "podman ps" for the port, and use e.g.:
# virsh -c qemu+tcp://localhost:<port>/session list
set -x
$CRUN run -it --rm --device=/dev/kvm --publish 127.0.0.1::16509 $PODMAN_SELINUX_FIX \
    --env KSTESTS_TEST="$KSTESTS_TEST" --env TESTTYPE="${TESTTYPE:-}" --env SKIP_TESTTYPES="${SKIP_TESTTYPES:-}" \
    --env TEST_JOBS="$TEST_JOBS" --env PLATFORM="${PLATFORM:-}" --env TEST_RETRY="${TEST_RETRY:-}" \
    ${UPDATES_IMG_ARGS:-} ${ADDITIONAL_REPO_ARGS:-} ${CONTAINER_RUN_ARGS:-} \
    ${VAR_TMP:-} -v "$PWD/data:/opt/kstest/data:z" -v "$BASEDIR:/kickstart-tests:ro,z" ${DEFAULTS_SH_ARGS:-} \
    $CONTAINER /kickstart-tests/containers/runner/run-kstest

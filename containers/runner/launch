#!/bin/bash
# Run a set of tests (positional command line arguments) in the runner container in podman or docker.
# Tests are taken from the current kickstart-tests checkout
# If data/images/boot.iso exists, that is tested, otherwise it downloads the current image for given
# platform and stores it in data/images/boot-<platform>.iso.
# Runs --recommended-jobs number of parallel tests by default, which can be changed by setting $TEST_JOBS.

set -eu

BASEDIR=$(dirname $(dirname $(dirname $(realpath $0))))
CRUN=${CRUN:-$(which podman docker 2>/dev/null | head -n1)}
CONTAINER=${CONTAINER:-quay.io/rhinstaller/kstest-runner}
# Podman in rootless mode does not have access to /dev/kvm socket https://bugzilla.redhat.com/show_bug.cgi?id=1901462
# disable selinux container separation when podman is executed as user
PODMAN_SELINUX_FIX=
# The virt-viewer can be used to connect to the installation even when not started under root
# but it needs to have --network set to 'host'. This will also allow you to easily share VPN
# connection with the container. This will net be used when started under sudo as the bridging
# is expected to be used.
USE_HOST_NETWORKING="--network=host"
RUN_COMMAND=/kickstart-tests/containers/runner/run-kstest
SCENARIO=${SCENARIO:-unknown}
BOOT_ISO="boot.iso"

# Get number of jobs to be run in parallel based on number of CPUs and amount of RAM
recommended_jobs() {
    local ram_for_test=2.5
    mem_limit=$(awk -F":" -v ram_for_test=${ram_for_test} '$1~/MemTotal/{print int($2 / 1024^2 / ram_for_test) }' /proc/meminfo )
    cpu_limit=$(nproc)
    if [ $mem_limit -lt $cpu_limit ]; then
        echo ${mem_limit}
    else
        echo ${cpu_limit}
    fi
}

TEST_JOBS=${TEST_JOBS:-$(recommended_jobs)}
PLATFORM="fedora_rawhide"

if ! test -w /dev/kvm; then
    echo "FATAL: /dev/kvm not accessible" >&2
    exit 1
fi

usage() {
    cat <<EOF
Usage:
  Run individual tests:
    $0 [options] test1 test2 ...

  Run all tests:
    $0 [options] all

Options:
 -j, --jobs N                         Run N jobs in parallel (default: $(recommended_jobs))
 -p, --platform NAME                  See fragments/platform/ (default: fedora_rawhide)
 -t, --testtype TYPE                  Only run TYPE tests
 -s, --skip-testtypes TYPE[,TYPE..]   Don't run tests with given types
 -u, --updates PATH|URL               Set updates.img path or URL
 -r, --retry                          Retry failed tests once, to guard against random
                                      infrastructure failures
 -c, --connect-shell                  Connect to the container and do not run the tests
                                      automatically
 --daily-iso TOKEN_FILE               Download and use daily boot.iso instead of rawhide's
                                      (This requires a GitHub token that can read
                                       rhinstaller/kickstart-tests workflow artifacts.)
 --defaults DEFAULTS_SH_FILE          Path to a file with custom shell script to override
                                      defaults. The base defaults will be platform
                                      specific (scripts/defaults*.sh).
 --run-args ARGUMENTS                 Extra $CRUN options/arguments (space separated)
 --recommended-jobs                   Print the number of jobs (--jobs option) used
                                      by default and exit. It is calulated from the number
                                      of CPUs and the size of RAM.
 --scenario NAME                      Name of the tests being run, used to group results in json
                                      logs.
 --dry-run                            Do not run the tests, only process kickstarts
 -h, --help                           Show this help
EOF
}

# parse options
eval set -- "$(getopt -o j:p:t:s:u:rch --long jobs:,platform:,testtype:,skip-testtypes:,updates:,retry,connect-shell,daily-iso:,defaults:,run-args:,recommended-jobs,scenario:,timeout:,dry-run,help -- "$@")"

while true; do
    case "${1:-}" in
        -j|--jobs) shift; TEST_JOBS=$1 ;;
        -p|--platform) shift; PLATFORM=$1 ;;
        -t|--testtype) shift; TESTTYPE="$1" ;;
        -s|--skip-testtypes) shift; SKIP_TESTTYPES="$1" ;;
        -u|--updates) shift; UPDATES_IMAGE="$1" ;;
        -r|--retry) TEST_RETRY=1 ;;
        -c|--connect-shell) RUN_COMMAND=/bin/bash ;;
        --daily-iso) shift; DAILY_ISO_TOKEN="$1" ;;
        --defaults) shift; DEFAULTS_SH="$1" ;;
        --run-args) shift; CONTAINER_RUN_ARGS="$1" ;;
        --recommended-jobs) recommended_jobs; exit 0 ;;
        --timeout) shift; TIMEOUT="$1" ;;
        --scenario) shift; SCENARIO="$1" ;;
        --dry-run) DRY_RUN=1 ;;
        -h|--help) usage; exit 0 ;;
        --) shift; break ;;
    esac
    shift
done

# avoid accidentally running all tests
if [ -z "${1:-}" ] && [ -z "${TESTTYPE:-}" ]; then
    usage
    exit 1
elif [ "${1:-}" = all ] && [ -z "${2:-}" ]; then
    KSTESTS_TEST=""
else
    KSTESTS_TEST="$*"
fi

# prepare data directory
mkdir -p data/images
mkdir -p -m 777 data/logs
if ! [ -e "data/images/boot.iso" ]; then
    BOOT_ISO="boot-${PLATFORM}.iso"
    # do not download the ISO if it already exists
    if ! [ -e "data/images/boot-${PLATFORM}.iso" ]; then
        if [ -n "${DAILY_ISO_TOKEN:-}" ]; then
            echo "INFO: data/images/${BOOT_ISO} does not exist, downloading daily iso..."
            $PWD/containers/runner/fetch_daily_iso.sh ${DAILY_ISO_TOKEN} data/images/boot-${PLATFORM}.iso
        else
            echo "INFO: data/images/${BOOT_ISO} does not exist, downloading current ${PLATFORM} image..."
            source scripts/defaults-${PLATFORM}.sh
            curl -L  "${KSTEST_URL}/images/boot.iso" --output data/images/boot-${PLATFORM}.iso
        fi
        echo "Using downloaded data/images/${BOOT_ISO}"
    else
        echo "Using existing data/images/${BOOT_ISO}"
    fi
else
    echo "Using existing data/images/${BOOT_ISO}"
fi

# support both path and URL for --updates
if [ -e "${UPDATES_IMAGE:-}" ]; then
    # local file; bind mount into container
    UPDATES_IMG_ARGS="-v $UPDATES_IMAGE:/updates.img:ro,Z --env UPDATES_IMAGE=/updates.img"
elif [ -n "${UPDATES_IMAGE:-}" ]; then
    # URL, pass through
    UPDATES_IMG_ARGS="--env UPDATES_IMAGE=$UPDATES_IMAGE"
fi

if [ -n "${DEFAULTS_SH:-}" ]; then
    DEFAULTS_SH_ARGS="-v $DEFAULTS_SH:/home/kstest/.kstests.defaults.sh:ro,z"
fi

# if there is enough RAM (2 GB per test with 2x safety margin), and we don't keep VM images, put the VMs on tmpfs for faster tests
if awk "/MemAvailable:/ { exit (\$2 > 4000000*${TEST_JOBS}) ? 0 : 1  }" /proc/meminfo; then
    VAR_TMP="--tmpfs /var/tmp/"
# for many parallel jobs, use a anonymous volume, so that the container does not go ENOSPC
elif [ ${TEST_JOBS} -gt 4 ]; then
    VAR_TMP="-v /var/tmp"
fi

if [ "${CRUN%podman*}" != "$CRUN" ] && [ $(id -u) -ne 0 ]; then
    echo "Disabling SELinux container separation to enable /dev/kvm socket access."
    PODMAN_SELINUX_FIX="--security-opt label=disable"
fi

# Do not use 'host' networking when started under root
if [ "$(id -u)" -eq 0 ]; then
    USE_HOST_NETWORKING=""
fi

# Build up a list of KSTEST_* environment variables to be passed into the container
TEST_ENV_VARS=$(printenv | while read line; do
    key="$(echo $line | cut -d'=' -f1)"
    val="$(echo $line | cut -d'=' -f2-)"

    if [[ "${key}" =~ ^KSTEST_ ]]; then
        echo -n " --env ${key}=${val//&/\\&}"
    fi
    done)

# Run container against the local repository, to test changes easily
# Expose the container's libvirt to the host; check "podman ps" for the port, and use e.g.:
# virsh -c qemu+tcp://localhost:<port>/session list
set -x
$CRUN run -it --rm --device=/dev/kvm --publish 127.0.0.1::16509 $PODMAN_SELINUX_FIX \
    --env SCENARIO="${SCENARIO:-unknown}" \
    --env DRY_RUN="${DRY_RUN:-}" \
    --env KSTESTS_TEST="$KSTESTS_TEST" --env TESTTYPE="${TESTTYPE:-}" --env SKIP_TESTTYPES="${SKIP_TESTTYPES:-}" \
    --env KSTESTS_RUN_TIMEOUT="${TIMEOUT:-}" \
    --env TEST_JOBS="$TEST_JOBS" --env PLATFORM_NAME="${PLATFORM:-}" --env TEST_RETRY="${TEST_RETRY:-}" ${UPDATES_IMG_ARGS:-} ${CONTAINER_RUN_ARGS:-} \
    --env KSTESTS_KEEP=${KSTESTS_KEEP:-1} \
    --env BOOT_ISO=${BOOT_ISO} \
    ${USE_HOST_NETWORKING:-} ${USE_HOST_NETWORKING:+--env USE_HOST_NETWORKING=true}\
    ${TEST_ENV_VARS} \
    ${VAR_TMP:-} \
    ${DEFAULTS_SH_ARGS:-} \
    -v "$PWD/data:/opt/kstest/data:z" \
    -v "$BASEDIR:/kickstart-tests:ro,z" \
    $CONTAINER $RUN_COMMAND

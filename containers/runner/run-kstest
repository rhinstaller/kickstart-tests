#!/bin/sh

set -o pipefail -ex

KSTESTS_REPOSITORY=${KSTESTS_REPOSITORY:-https://github.com/rhinstaller/kickstart-tests}
KSTESTS_BRANCH=${KSTESTS_BRANCH:-main}
KSTESTS_DIR=${APP_ROOT}/kickstart-tests
KSTESTS_TEST=${KSTESTS_TEST:-}
KSTESTS_KEEP=${KSTESTS_KEEP:-1}
TIMEOUT=${KSTESTS_RUN_TIMEOUT:-0}
SCENARIO=${SCENARIO:-unknown}

UPDATES_IMAGE=${UPDATES_IMAGE:-""}
BOOT_ISO=${BOOT_ISO:-boot.iso}
ISO_DIR=${APP_DATA}/images
LOGS_DIR=${APP_DATA}/logs

# user can bind-mount a local kickstart-tests dir to test that
if [ -d /kickstart-tests ]; then
    # copy it so that we can write our *.ks files, fragments/, and so on
    rsync -r --exclude '/data/' /kickstart-tests/ $KSTESTS_DIR
else
    # if not given, check out current git
    git clone ${KSTESTS_REPOSITORY} ${KSTESTS_DIR}
    git -C ${KSTESTS_DIR} checkout ${KSTESTS_BRANCH}
    git -C ${KSTESTS_DIR} remote -v
fi

# Prepare the configuration
UPDATES_IMAGE_ARG=""
if [ -n "${UPDATES_IMAGE}" ]; then
  UPDATES_IMAGE_ARG="-u ${UPDATES_IMAGE}"
fi

PLATFORM_ARG=""
if [ -n "${PLATFORM_NAME}" ]; then
    PLATFORM_ARG="-p ${PLATFORM_NAME}"
fi
TESTTYPE_ARG=""
if [ -n "${TESTTYPE}" ]; then
    TESTTYPE_ARG="-t ${TESTTYPE}"
fi

SKIP_TESTTYPES_ARG=""
if [ -n "${SKIP_TESTTYPES}" ]; then
    SKIP_TESTTYPES_ARG="-s ${SKIP_TESTTYPES}"
fi

RETRY_ARG=""
if [ -n "${TEST_RETRY}" ]; then
    RETRY_ARG="-r"
fi

DRY_RUN_ARG=""
if [ -n "${DRY_RUN}" ]; then
    DRY_RUN_ARG="-d"
fi

# work around virt-install TOCTOU race <https://github.com/virt-manager/virt-manager/pull/175>
mkdir -p ~/.cache/virt-manager/boot

# Expose libvirt to the outside, so that one can attach virt-viewer easily for debugging
# Disable TLS; we don't have a certificate setup, and this is all local anyway
mkdir -p ~/.config/libvirt
printf 'listen_tls = 0\nlisten_tcp = 1\nauth_tcp = "none"\n' > ~/.config/libvirt/virtproxyd.conf
virtproxyd -f ~/.config/libvirt/virtproxyd.conf &

print_viewer_help() {
    IP="$1"
    set +x
    echo "************************************************************************"
    echo "You can connect to this container's libvirt with this connection string:"
    echo
    echo "   virt-viewer -c qemu+tcp://${IP}/session"
    echo
    echo "************************************************************************"
    set -x
}

if test -n "$USE_HOST_NETWORKING"; then
    print_viewer_help "127.0.0.1"
# this only works with a bridged network; user containers use SLIRP and only have a tun0 interface
elif MY_IP=$(ip -4 -c a show dev eth0 2>/dev/null | grep -Eo '[0-9.]+\.[0-9]+' | grep -v '\.255'); then
    print_viewer_help $MY_IP
fi

# Run the test, capture the output for run_report.sh
TEST_LOG=/var/tmp/kstest.log
pushd ${KSTESTS_DIR}
set +e
scripts/run_kickstart_tests.sh -x ${TIMEOUT} ${DRY_RUN_ARG} -k ${KSTESTS_KEEP} -i ${ISO_DIR}/${BOOT_ISO} ${UPDATES_IMAGE_ARG} ${PLATFORM_ARG} ${TESTTYPE_ARG} ${SKIP_TESTTYPES_ARG} ${RETRY_ARG} ${KSTESTS_TEST} 2>&1 | tee $TEST_LOG
RC=$?
set -e
popd

# Create json log
${KSTESTS_DIR}/scripts/log2json --scenario $SCENARIO --output $TEST_LOG.json $TEST_LOG

# Copy logs to a volume
# Fixup permissions
chmod -R a+rw /var/tmp/kstest-*
# Clean up (artifacts from broken test)
if [ "$KSTESTS_KEEP" != "2" ]; then
    find /var/tmp/kstest-* -name "*.iso" -delete
    find /var/tmp/kstest-* -name "*.img" -delete
fi

KSTEST_LIST_LOG=/var/tmp/kstest-list
VIRT_INSTALL_LOG=/var/tmp/kstest.virt-install.log

for f in $TEST_LOG $TEST_LOG.json $KSTEST_LIST_LOG ; do
    cp ${f} ${LOGS_DIR}
    chmod a+rw "${LOGS_DIR}/$(basename ${f})" || true
done

# The log can be missing
cp ${VIRT_INSTALL_LOG} ${LOGS_DIR} || true
chmod a+rw "${LOGS_DIR}/$(basename ${VIRT_INSTALL_LOG})" || true

# Move to target logs directory; this sometimes fails on nested directory permission/ownership
cp -pr /var/tmp/kstest-* ${LOGS_DIR} || true
cp -r /var/tmp/kstest-list-substituted ${LOGS_DIR} || true

# Show summary report
${KSTESTS_DIR}/scripts/run_report.sh < $TEST_LOG

exit $RC

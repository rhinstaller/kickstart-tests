#NOTE: this test is a variant of bond2 test, it is sharing its .sh file (setup of NICs and network boot configuration) so beware of changing it independently of bond2 test
%ksappend repos/default.ks

%include /tmp/ksinclude
%pre
echo "network --device bond0 --bootproto dhcp --bondslaves=@KSTEST_NETDEV2@,@KSTEST_NETDEV3@ --bondopts=mode=active-backup,primary=@KSTEST_NETDEV2@ --activate --onboot=no --bindto=mac" >> /tmp/ksinclude
echo "network --device bond1 --bootproto dhcp --bondslaves=@KSTEST_NETDEV4@,@KSTEST_NETDEV5@ --bondopts=mode=active-backup,primary=@KSTEST_NETDEV4@,miimon=100,fail_over_mac=2 --bindto=mac" >> /tmp/ksinclude
%end

bootloader --timeout=1
zerombr
clearpart --all
autopart

keyboard us
lang en
timezone America/New_York
rootpw qweqwe
shutdown

%packages
%end

%post --nochroot

@KSINCLUDE@ post-nochroot-lib-network.sh

check_gui_configurations @KSTEST_NETDEV1@ @KSTEST_NETDEV2@ @KSTEST_NETDEV3@ @KSTEST_NETDEV4@ @KSTEST_NETDEV5@ bond0 bond1

%end

%post

@KSINCLUDE@ post-lib-network.sh
@KSINCLUDE@ scripts-lib.sh

check_device_config_value bond0 ONBOOT no connection autoconnect false

check_device_config_value bond0_slave_1 ONBOOT no connection autoconnect false
check_device_config_value bond0_slave_2 ONBOOT no connection autoconnect false
check_device_config_value bond0_slave_1 MASTER bond0 connection controller bond0
check_device_config_value bond0_slave_2 MASTER bond0 connection controller bond0

check_device_connected bond0 yes
check_bond_has_slave bond0 @KSTEST_NETDEV2@ yes
check_bond_has_slave bond0 @KSTEST_NETDEV3@ yes
check_bond_has_slave bond0 @KSTEST_NETDEV1@ no
check_bond_has_slave bond0 @KSTEST_NETDEV4@ no
check_bond_has_slave bond0 @KSTEST_NETDEV5@ no

check_device_config_value bond1 ONBOOT yes connection autoconnect __NONE

check_device_config_value bond1_slave_1 ONBOOT yes connection autoconnect __NONE
check_device_config_value bond1_slave_2 ONBOOT yes connection autoconnect __NONE
check_device_config_value bond1_slave_1 MASTER bond1 connection controller bond1
check_device_config_value bond1_slave_2 MASTER bond1 connection controller bond1

check_device_config_bound_to_mac bond0_slave_1
check_device_config_bound_to_mac bond0_slave_2
check_device_config_bound_to_mac bond1_slave_1
check_device_config_bound_to_mac bond1_slave_2

# FIXME this doesn't seem to hold for RHEL
check_device_connected bond1 no

# Configuration from boot options
check_config_exists @KSTEST_NETDEV1@ yes
# RHEL-8-FAILURE: anaconda does not create default config file for enslaved device in RHEL8
# Since RHEL-38451 don't create default persistent connection for ports/slaves
check_config_exists @KSTEST_NETDEV2@ no
check_config_exists @KSTEST_NETDEV3@ no
check_config_exists @KSTEST_NETDEV4@ no
check_config_exists @KSTEST_NETDEV5@ no

# No error was written to /root/RESULT file, everything is OK
if [[ ! -e /root/RESULT ]]; then
   echo SUCCESS > /root/RESULT
fi
%end

#
# try enabling one module multiple times
# - with diferent stream specififcations
#
# current expected behavior
# - fails with traceback when the module command is being processed
#

%ksappend repos/default.ks
%ksappend repos/modular.ks
%ksappend common/common_no_payload.ks

module --name=cri-o --stream=2018.0
module --name=cri-o --stream=1.11

%packages
# lets use a no-default profile to see if it is correctly set afterwards
kernel
vim
%end

%post
# modules have some packages defined as their API in their profiles,
# we can check for those to be (or not to be installed) to see if the
# module has (or has not) been installed

# the vim standalone package
rpm -q vim-minimal
if [[ $? != 0 ]]; then
    echo '*** vim-minimal package requested but not installed' >> /root/RESULT
fi

# it is also nice to have kernel
rpm -q kernel
if [[ $? != 0 ]]; then
    echo '*** kernel package not installed' >> /root/RESULT
fi

# if we got this far the cri-o module should be just enabled, so the API package should *not*
# be installed

rpm -q cri-o
if [[ $? == 0 ]]; then
    echo '*** cri-o package for cri-o module installed (module should be only enabled)' >> /root/RESULT
fi

# next we will check if the module is seen as enabled/installed from the
# metadata/DNF point of view
dnf module list --enabled cri-o | grep cri-o || echo "*** cri-o module not marked as enabled" >> /root/RESULT
dnf module list --installed cri-o | grep cri-o && echo "*** cri-o module marked as installed (should be just enabled)" >> /root/RESULT

dnf module list --enabled cri-o | grep "1.11 \[e\]" || echo "*** cri-o stream id 8 not marked as enabled" >> /root/RESULT

if [ ! -f /root/RESULT ]
then
    # no result file (no errors) -> success
    echo SUCCESS > /root/RESULT
else
    # some errors happened
    exit 1
fi

%end
